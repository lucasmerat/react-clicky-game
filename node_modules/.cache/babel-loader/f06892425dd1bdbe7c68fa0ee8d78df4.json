{"ast":null,"code":"var _jsxFileName = \"/Users/lucasmerat/Desktop/bootCamp/week-17/homeWork/react-clicky-game/src/components/Main.js\";\nimport React, { Component } from \"react\";\nimport chars from \"../data/chars.json\";\nimport Header from \"./Header\";\nimport Character from \"./Character.js\";\n\nclass Main extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      chars,\n      score: 0,\n      topScore: 0,\n      message: \"Click an image to begin!\",\n      shake: false\n    };\n\n    this.shuffle = () => {\n      if (chars) {\n        const shuffledChars = chars.slice();\n\n        for (let i = shuffledChars.length - 1; i > 0; i--) {\n          const rand = Math.floor(Math.random() * (i + 1));\n          var _ref = [shuffledChars[rand], shuffledChars[i]];\n          shuffledChars[i] = _ref[0];\n          shuffledChars[rand] = _ref[1];\n        }\n\n        this.setState({\n          chars: shuffledChars\n        });\n      }\n    };\n\n    this.checkIfClicked = id => {\n      this.state.chars.forEach(char => {\n        if (char.id === id) {\n          if (char.clicked === false) {\n            this.markClicked(id);\n          } else {\n            this.alreadyClicked();\n          }\n        }\n      });\n    };\n\n    this.markClicked = id => {\n      let _this$state = this.state,\n          chars = _this$state.chars,\n          score = _this$state.score,\n          topScore = _this$state.topScore;\n      let clickAdjusted = chars.map(char => {\n        if (char.id === id) {\n          char.clicked = true;\n        }\n\n        return char;\n      });\n      let updatedScore = score + 1;\n      let updatedTopScore = updatedScore > topScore ? updatedScore : topScore;\n      this.setState({\n        chars: clickAdjusted,\n        score: updatedScore,\n        topScore: updatedTopScore,\n        message: \"You guessed correctly!\"\n      });\n      this.shuffle();\n    };\n\n    this.alreadyClicked = () => {\n      console.log(\"Already clicked that one, you loose!\");\n      let allUnclicked = this.state.chars.map(char => {\n        char.clicked = false;\n        return char;\n      });\n      this.setState({\n        score: 0,\n        chars: allUnclicked,\n        message: \"You already clicked that one! Restarting game...\",\n        shake: true\n      }, () => {\n        console.log(this.state.shake);\n      });\n    };\n  }\n\n  componentDidMount() {\n    this.shuffle();\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(Header, {\n      score: this.state.score,\n      topScore: this.state.topScore,\n      message: this.state.message,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, this.state.chars && this.state.chars.map(char => {\n      return React.createElement(Character, {\n        key: char.id,\n        id: char.id,\n        image: char.image,\n        name: char.name,\n        clicked: char.clicked,\n        checkIfClicked: this.checkIfClicked,\n        shake: this.state.shake,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      });\n    })));\n  }\n\n}\n\nexport default Main;","map":{"version":3,"sources":["/Users/lucasmerat/Desktop/bootCamp/week-17/homeWork/react-clicky-game/src/components/Main.js"],"names":["React","Component","chars","Header","Character","Main","state","score","topScore","message","shake","shuffle","shuffledChars","slice","i","length","rand","Math","floor","random","setState","checkIfClicked","id","forEach","char","clicked","markClicked","alreadyClicked","clickAdjusted","map","updatedScore","updatedTopScore","console","log","allUnclicked","componentDidMount","render","image","name"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport chars from \"../data/chars.json\";\nimport Header from \"./Header\";\nimport Character from \"./Character.js\";\n\nclass Main extends Component {\n  state = {\n    chars,\n    score: 0,\n    topScore: 0, \n    message: \"Click an image to begin!\",\n    shake: false\n  };\n  componentDidMount() {\n    this.shuffle();\n  }\n  shuffle = () => {\n    if (chars) {\n      const shuffledChars = chars.slice();\n      for (let i = shuffledChars.length - 1; i > 0; i--) {\n        const rand = Math.floor(Math.random() * (i + 1));\n        [shuffledChars[i], shuffledChars[rand]] = [\n          shuffledChars[rand],\n          shuffledChars[i]\n        ];\n      }\n      this.setState({\n        chars: shuffledChars\n      });\n    }\n  };\n  checkIfClicked = (id) =>{\n    this.state.chars.forEach(char=>{\n      if(char.id === id){\n        if(char.clicked === false){\n          this.markClicked(id);\n        } else{\n          this.alreadyClicked();\n        }\n      }\n    })\n  }\n  markClicked = (id) =>{\n    let { chars, score, topScore } = this.state;\n    let clickAdjusted = chars.map(char=>{\n\n      if(char.id === id){\n        char.clicked = true;\n      }\n      return char\n    });\n    let updatedScore = score + 1;\n    let updatedTopScore = updatedScore > topScore ? updatedScore : topScore\n    this.setState({\n      chars: clickAdjusted, \n      score: updatedScore, \n      topScore: updatedTopScore, \n      message: \"You guessed correctly!\"\n    })\n    this.shuffle();\n  }\n  alreadyClicked = () =>{\n    console.log(\"Already clicked that one, you loose!\")\n    let allUnclicked = this.state.chars.map(char=>{\n      char.clicked = false;\n      return char;\n    })\n    this.setState({\n      score: 0, \n      chars: allUnclicked, \n      message: \"You already clicked that one! Restarting game...\",\n      shake: true\n    }, ()=>{\n      console.log(this.state.shake)\n    })\n  }\n\n  render() {\n    return (\n      <div>\n        <Header score={this.state.score} topScore={this.state.topScore} message={this.state.message} />\n        <div className=\"container\">\n            {this.state.chars &&\n              this.state.chars.map(char => {\n                return (\n                  <Character\n                    key={char.id}\n                    id={char.id}\n                    image={char.image}\n                    name={char.name}\n                    clicked={char.clicked}\n                    checkIfClicked={this.checkIfClicked}\n                    shake={this.state.shake}\n                  />\n                );\n              })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Main;\n"]},"metadata":{},"sourceType":"module"}